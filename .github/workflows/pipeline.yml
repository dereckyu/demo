# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build, Push and Deploy to ACK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  REGION: cn-shanghai
  ACK_CLUSTER_ID: c0c6fd35f298c43e190d24bac3f7eed2a
  ACK_KUBE_CONFIG: ${{ secrets.ACK_CITYARK_KUBE_CONFIG }}
  REGISTRY: ${{ vars.ACR_CITYARK_REGISTRY }}
  NAMESPACE: cityark
  APP_NAME: demo


jobs:
  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    # - name: Set up JDK 21
    #   uses: actions/setup-java@v4
    #   with:
    #     java-version: '21'
    #     distribution: 'temurin'
    #     cache: maven
    # - name: Build with Maven
    #   run: mvn -B package --file pom.xml
    
    # - name: Login to ACR
    #   uses: docker/login-action@v3
    #   with:
    #     registry: ${{ env.REGISTRY }}
    #     username: ${{ secrets.ACR_CITYARK_USERNAME }}
    #     password: ${{ secrets.ACR_CITYARK_PASSWORD }}

    
    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v3
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3
    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: true
    #     platforms: linux/arm64
    #     tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.APP_NAME }}:latest
    #     cache-from: type=gha
    #     cache-to: type=gha,mode=max

    - name: Configure kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        client-version: 'latest'

    - name: Set kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ env.ACK_KUBE_CONFIG }}" > ~/.kube/config

    - name: View ACK
      run: |
        kubectl get ns

    # - name: Configure CLI Credentials
    #   uses: aliyun/configure-aliyun-credentials-action@v1
    #   with:
    #     access-key-id: ${{ secrets.ALIYUN_CITYARK_ACCESS_KEY }}
    #     access-key-secret: ${{ secrets.ALIYUN_CITYARK_ACCESS_SECRET }}
    #     region-id: ${{ env.REGION }}

    # - name: Get ACK Cluster Credentials
    #   run: |
    #     aliyun cs GET /k8s/${{ env.ACK_CLUSTER_ID }}/user_config | jq -r .config > kubeconfig.yaml
    #     export KUBECONFIG=kubeconfig.yaml

    # - name: Deploy to ACK
    #   run: |
    #     # Create namespace if not exists
    #     kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
    #     # Replace variables in template and apply
    #     envsubst < k8s/template.yaml | kubectl apply -f -
